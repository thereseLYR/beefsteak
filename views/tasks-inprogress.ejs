<!DOCTYPE html>
<html>

<head>
  <%- include('./partials/head.ejs') %>
</head>

<body>
  <div id="cover"></div>
  <%- include('./partials/navbar.ejs') %>

  <h1>fill-in-your-tasklist page</h1>

  <div id="timeSection" class="timeSection">
    <h1 id="elapsedTime" class="elapsedTime">25 : 00</h1>
    <div id="functionButtons" class="functionButtons">
      <button id="startButton" class="button">Start</button>
      <button id="stopButton" class="button">Stop</button>
    </div>
  </div>

  <div>
    <h1 class="text-center"><%= list_info[0]['list_name'] %></h1>
  </div>
  <div>
    <p class="text-center text-muted">
      <%= list_info[0]['list_description'] %>
    </p>
  </div>

  <% let completedTasksCount = 0 %>

  <!-- tasks are visually marked as complete now -->
  <div class="list-group mx-5">
    <!-- to let SUBMIT button appear to mark list as complete once all tasks have been marked complete -->
    <% for (let i = 0; i < task_info.length; i += 1) { %>
    <% if(task_info[i]['completion_status'] == true){ %>
    <% completedTasksCount += 1 %>
    <form action="#">
      <label class="list-group-item bg-secondary text-light">
        <%= task_info[i]['task_name'] %>
      </label>
    </form>
    <% } else { %>
    <form action="/inprogress/task/<%= task_info[i]['id'] %>" method="POST">
      <label class="list-group-item">
        <input class="form-check-input me-1" type="submit" value="" />
        <%= task_info[i]['task_name'] %>
      </label>
    </form>
    <% }} %>
  </div>

  <% if(completedTasksCount == task_info.length) { %>
  <!-- hidden form for submitting PUT request once all tasks are complete/timer runout -->
  <form action="/complete/list/<%= list_info[0]['id'] %>" method="POST">
    <input type="hidden">
    <label class="d-grid gap-2 my-2 mx-5">
      <input class="btn btn-primary" type="submit" value="All Done!">
    </label>
  </form>
  <% } %>

  <!-- Optional JavaScript -->
  <script>
    src =
      "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js";
    integrity =
      "sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p";
    crossorigin = "anonymous";
  </script>

  <script>
    // elapsed time must start from ~25min and count down
    // use window.localstorage ???
    let currentElapsedTime;
    let stopped = true;
    let timerInterval;

    /**
     * sends a request to the specified url from a form. this will change the window location.
     * @param {string} path the path to send the post request to
     * @param {object} params the parameters to add to the url
     * @param {string} [method=post] the method to use on the form
     * from https://stackoverflow.com/questions/133925/javascript-post-request-like-a-form-submit
     */

    function post(path, params, method = "post") {
      // The rest of this code assumes you are not using a library.
      // It can be made less verbose if you use one.
      const form = document.createElement("form");
      form.method = method;
      form.action = path;

      for (const key in params) {
        if (params.hasOwnProperty(key)) {
          const hiddenField = document.createElement("input");
          hiddenField.type = "hidden";
          hiddenField.name = key;
          hiddenField.value = params[key];

          form.appendChild(hiddenField);
        }
      }

      document.body.appendChild(form);
      form.submit();
    }

    const showTime = function(element, elapsedTime) {
      // elapsedTime is in seconds
      if (elapsedTime <= 0) {
        // console.log("TIMER RUNOUT");
        stopButtonFunction();
        window.alert(`Time's up!`);
        // do fetch req to post body
        // window.location.replace('/complete')
        // idk if i can force a POST request after the timer runs out
        // possible by sending a hidden POST form
        post("/complete/list/<%= list_info[0]['id']%>");
      } else {
        let minutes = Math.floor(elapsedTime / 60);
        let seconds = elapsedTime - minutes * 60;

        window.localStorage.setItem("currentMillisecRemaining", elapsedTime);

        let timeStr = "";
        timeStr += minutes.toString().padStart(2, "0") + " : ";
        timeStr += seconds.toString().padStart(2, "0");
        // console.log(timeStr);
        element.innerHTML = timeStr;
        return element.innerHTML;
      }
    };

    const stopButtonFunction = function() {
      elapsedTime = null;
      clearInterval(timerInterval);
      // how do i send a post request after this :/
    };

    const startButtonFunction = function() {
      stopped = false;

      timerInterval = setInterval(() => {
        currentElapsedTime -= 1;
        console.log("currentElapsedTime", currentElapsedTime);
        showTime(document.getElementById("elapsedTime"), currentElapsedTime);
      }, 1000);
    };

    // Timer setup

    if (window.localStorage.getItem("currentMillisecRemaining") !== null) {
      console.log(
        "time detected:",
        window.localStorage.getItem("currentMillisecRemaining")
      );
      currentElapsedTime = window.localStorage.getItem(
        "currentMillisecRemaining"
      );
      // start timer immediately if time is detected
      startButtonFunction();
    } else {
      currentElapsedTime = 16; // ~ 15s, short duration for testing
    }
    // window.localStorage.setItem("currentMillisecRemaining")

    const startButton = document.getElementById("startButton");
    const stopButton = document.getElementById("stopButton");
    // const resetButton = document.getElementById("resetButton");
    // const lapButton = document.getElementById("lapButton");

    // Setting Event Listeners
    window.onload = function() {
      startButton.addEventListener("click", () => {
        startButtonFunction();
      });
      stopButton.addEventListener("click", () => {
        stopButtonFunction();
      });
    };
  </script>
</body>

</html>